//
//  ColorRandomViewController.swift
//  ColorGameTest
//
//  Created by Carolain Lenes Beltran on 19/07/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the 🐍 VIPER generator
//

import UIKit

final class ColorRandomViewController: UIViewController {
    
    // MARK: - IBOutlets
    @IBOutlet weak var colorCollectionView: UICollectionView!
    @IBOutlet weak var colorView: UIView!
    @IBOutlet weak var hitslabel: UILabel!
    @IBOutlet weak var errorLabel: UILabel!
    @IBOutlet weak var timeLabel: UILabel!
    @IBOutlet weak var startGame: UIButton!
    
    // MARK: - Variables
    var colorArray: [UIColor] = []
    var count = 15
    var countHits = 0
    var countError = 0
 
    // MARK: - Public properties -
    var presenter: ColorRandomPresenterInterface!

    // MARK: - Lifecycle -
    override func viewDidLoad() {
        super.viewDidLoad()
        checkWireframe()
        self.presenter.getColorRandom(isPlayAgain: false)
    }
    
    func configurerView() {
        count = 15
        self.timeLabel.text = "\(count)"
        Timer.scheduledTimer(withTimeInterval: 1.0, repeats: true) { timer in
            self.update(timer: timer)
        }
        
    }
    
    @objc func update(timer: Timer) {
        if(count > 0) {
            count -= 1
            timeLabel.text = "\(count)"
        }else {
            let alert = UIAlertController(title: "Tiempo", message: "Aciertos: \(self.countHits) \n Errores: \(self.countError) ", preferredStyle: UIAlertController.Style.alert)
            alert.addAction(UIAlertAction(title: "Nuevo juego", style: UIAlertAction.Style.default, handler: { action in
                self.presenter.getColorRandom(isPlayAgain: false)
                self.startGame.isEnabled = true
                self.hitslabel.text = "Aciertos: 0"
                self.errorLabel.text = "Errores: 0"
                self.countHits = 0
                self.countError = 0
            }))
            self.present(alert, animated: true, completion: nil)
            timer.invalidate()
        }
    }
    
    // MARK: -
    @IBAction func colorStartButtonAction(){
        self.presenter.getColorRandom(isPlayAgain: true)
        configurerView()
        self.startGame.isEnabled = false
    }

}

// MARK: - Extensions -

extension ColorRandomViewController: ColorRandomViewInterface {
    
    func checkWireframe() {
        if presenter == nil {
            _ = ColorRandomWireframe.init(moduleViewController: self)
        }
    }
    
    func reloadColorRandom (colorArray: [UIColor]){
        self.colorArray = colorArray
        self.colorView.backgroundColor = colorArray.randomElement()
        self.colorCollectionView.reloadData()
    }
    
}

extension ColorRandomViewController: UICollectionViewDataSource {

    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        self.colorArray.count
    }

    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
      
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: CollectionViewTypeCell.colorCollectionViewCell.rawValue, for: indexPath) as! ColorCollectionViewCell
        cell.loadColorRandom(colorR: colorArray[indexPath.row])
        return cell
    }
    
    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
        
        let colorIndex = self.colorArray[indexPath.row]
        
        if colorIndex == colorView.backgroundColor {
            countHits += 1
            self.hitslabel.text = "Aciertos: \(countHits)"
        }else{
            countError += 1
            self.errorLabel.text = "Errores: \(countError)"
        }
        self.presenter.getColorRandom(isPlayAgain: true)
    }

}

extension ColorRandomViewController: UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {

    func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {

    }

    func collectionView(_ collectionView: UICollectionView, didEndDisplaying cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {

    }

    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        let padding: CGFloat =  20
        let collectionViewSize = collectionView.frame.size.width - padding

        return CGSize(width: collectionViewSize/3, height: 100)
    }

}
